name: Bump

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0-23/12 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/LICENSE"
      - "**/README.md"
  # pull_request:
  #   branches:
  #     - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "Bump"
  Bump:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set some variables
        run: |
          set -x
          GITHUB_API_BASEURL='https://api.github.com'
          TMP_FILE=$(mktemp)
          if curl -sS -i -I -H "Accept: application/vnd.github.v3+json" -o "$TMP_FILE" -- 'https://github-cache.yingmale.win/api/'; then
            HTTP_STATUS_CODE=$(awk 'NR==1 {print $2}' "$TMP_FILE")
            if [[ $HTTP_STATUS_CODE -ge 200 ]] && [[ $HTTP_STATUS_CODE -le 299 ]]; then
              GITHUB_API_BASEURL='https://github-cache.yingmale.win/api'
              echo "info: github cache is ready, will use ${GITHUB_API_BASEURL} as GITHUB_API_BASEURL."
            fi
          fi
          "rm" -f "$TMP_FILE"

          echo "GITHUB_API_BASEURL=${GITHUB_API_BASEURL}" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "REPO_URL=github.com/${{ github.repository }}" >> $GITHUB_ENV
          echo "shadowsocks_rust_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/shadowsocks/shadowsocks-rust/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "boringtun_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/cloudflare/boringtun/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "cfnts_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/cloudflare/cfnts/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "rsign2_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/jedisct1/rsign2/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "b3sum_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/BLAKE3-team/BLAKE3/releases/latest" |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "ripgrep_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/BurntSushi/ripgrep/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "coreutils_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/uutils/coreutils/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "sd_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/chmln/sd/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "fd_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/sharkdp/fd/releases/latest" |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "bat_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/sharkdp/bat/releases/latest" |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "hexyl_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/sharkdp/hexyl/releases/latest" |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "hyperfine_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/sharkdp/hyperfine/releases/latest" |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "fnm_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/Schniz/fnm/releases/latest" |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "checksec_rs_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/etke/checksec.rs/releases/latest" |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "dog_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/ogham/dog/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "qft_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/TudbuT/qft/commits?per_page=1&sha=nogui" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "websocat_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/vi/websocat/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "just_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/casey/just/commits?per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "desed_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/SoptikHa2/desed/releases/latest" |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "RUST_VERSION=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/rust-lang/rust/releases/latest" |
                grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "cachebust=$(date +%s)" >> $GITHUB_ENV
          echo "rust_nightly_date=$(TZ=':Asia/Taipei' date +%F)" >> $GITHUB_ENV
          set +x
        shell: bash
      # Runs a set of commands using the runners shell
      - name: Force push `release` branch
        run: |
          git config --local user.name "actions"
          git config --local user.email "action@github.com"
          git checkout release
          git reset --hard origin/master
          sed -i -E "s/^ARG shadowsocks_rust_latest_commit_hash=.+/ARG shadowsocks_rust_latest_commit_hash=${shadowsocks_rust_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG boringtun_latest_commit_hash=.+/ARG boringtun_latest_commit_hash=${boringtun_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG cfnts_latest_commit_hash=.+/ARG cfnts_latest_commit_hash=${cfnts_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG rsign2_latest_commit_hash=.+/ARG rsign2_latest_commit_hash=${rsign2_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG b3sum_latest_tag_name=.+/ARG b3sum_latest_tag_name=${b3sum_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG ripgrep_latest_commit_hash=.+/ARG ripgrep_latest_commit_hash=${ripgrep_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG coreutils_latest_commit_hash=.+/ARG coreutils_latest_commit_hash=${coreutils_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG sd_latest_commit_hash=.+/ARG sd_latest_commit_hash=${sd_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG fd_latest_tag_name=.+/ARG fd_latest_tag_name=${fd_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG bat_latest_tag_name=.+/ARG bat_latest_tag_name=${bat_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG hexyl_latest_tag_name=.+/ARG hexyl_latest_tag_name=${hexyl_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG hyperfine_latest_tag_name=.+/ARG hyperfine_latest_tag_name=${hyperfine_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG fnm_latest_tag_name=.+/ARG fnm_latest_tag_name=${fnm_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG checksec_rs_latest_tag_name=.+/ARG checksec_rs_latest_tag_name=${checksec_rs_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG dog_latest_commit_hash=.+/ARG dog_latest_commit_hash=${dog_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG qft_latest_commit_hash=.+/ARG qft_latest_commit_hash=${qft_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG websocat_latest_commit_hash=.+/ARG websocat_latest_commit_hash=${websocat_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG just_latest_commit_hash=.+/ARG just_latest_commit_hash=${just_latest_commit_hash:?empty value}/" Dockerfile
          sed -i -E "s/^ARG desed_latest_tag_name=.+/ARG desed_latest_tag_name=${desed_latest_tag_name:?empty value}/" Dockerfile
          sed -i -E "s/^ARG cachebust=.+/ARG cachebust=${cachebust:?empty value}/" Dockerfile
          git add Dockerfile
          git rm build_base_alpine.Dockerfile build_base_debian.Dockerfile
          git rm -r .github
          git commit -m "${{ env.RELEASE_NAME }}"
          git push -f origin HEAD:release
      - name: Force push `build_base` branch
        run: |
          git config --local user.name "actions"
          git config --local user.email "action@github.com"
          git checkout build_base
          git reset --hard origin/master
          sed -i -E "s/^    RUST_VERSION=.+/    RUST_VERSION=${RUST_VERSION:?empty value} \\\\/" build_base_alpine.Dockerfile build_base_debian.Dockerfile
          sed -i -E "s/^ENV rust_nightly_date=.+/ENV rust_nightly_date=${rust_nightly_date:?empty value} \\\\/" build_base_alpine.Dockerfile build_base_debian.Dockerfile
          git add build_base_alpine.Dockerfile build_base_debian.Dockerfile
          git rm Dockerfile
          git rm -r .github
          git commit -m "${{ env.RELEASE_NAME }}"
          git push -f origin HEAD:build_base
